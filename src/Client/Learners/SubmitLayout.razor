@inherits LayoutComponentBase
@layout NavMenuLayout

@using MasterCraft.Client.Mentors.Components
@using MasterCraft.Client.Common.Services
@using System.Security.Claims;
@using MasterCraft.Client.Common.State;
@using MasterCraft.Client.Common.Api;
@using MasterCraft.Shared.ViewModels.Aggregates;

@inject NavigationManager Navigation
@inject StripeService Stripe
@inject ApiClient Api
@inject SubmissionState SubmissionState

<AuthorizeView>
    <Authorized>
        @if ((progressTracker?.GetCurrentItem() ?? 0) != 3)
        {
            <div id="header">
                <img class="profile-image" src="@MentorProfile.ProfileImageUrl"/>
                <div class="mc-title">
                    <h4>@GetTitleLine()</h4>
                    <hr />
                </div>
            </div>
        }

        <ProgressTracker @ref="progressTracker" Items="items"/>
        <div class="entry-form">
            <CascadingValue Value="this">
                @Body
            </CascadingValue>
        </div>
    </Authorized>
</AuthorizeView>

<style>
    .bottom-btn {
        margin:auto;
        margin-top: 30px;
    }

    .entry-form{
        margin: auto;
        margin-top: 30px;
    }

    #header {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .profile-image {
        width: 100px;
        height: 100px;
        margin: 10px;
    }
</style>

@code {

    private ProgressTracker progressTracker;
    private List<ProgressTrackerItem> items;

    public MentorProfileVm MentorProfile => SubmissionState.MentorProfile;
    public OfferingVm Offering => SubmissionState.MentorProfile.Offerings.FirstOrDefault();
    public FeedbackRequestVm FeedbackRequest => SubmissionState.FeedbackRequest;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        InitializeProgressTracker();
    }

    public void ReconcilePageBasedOnSubmissionState(string profileId)
    {
        bool hasWork = !string.IsNullOrEmpty(FeedbackRequest.VideoEmbedUrl);
        bool hasQuestion = !string.IsNullOrEmpty(FeedbackRequest.Question);

        if (!hasWork)
        {
            Navigation.NavigateTo($"go/{profileId}/share");
        }

        if (hasWork && !hasQuestion)
        {
            Navigation.NavigateTo($"go/{profileId}/ask");
        }
    }

    public void UpdateProgressTracker(int itemNumber)
    {
        progressTracker.UpdateProgressTracker(itemNumber);
    }

    private string GetTitleLine()
    {
        return $"Submit your work to {MentorProfile.FirstName}";
    }

    private void InitializeProgressTracker()
    {
        items = new List<ProgressTrackerItem>()
        {
            new ProgressTrackerItem()
            {
                Label = "Share work",
                OnClick = () => Navigation.NavigateTo($"go/{MentorProfile.ProfileId}/share")
            },
            new ProgressTrackerItem()
            {
                Label = "Ask question",
                OnClick = () => Navigation.NavigateTo($"go/{MentorProfile.ProfileId}/ask")
            },
            new ProgressTrackerItem()
            {
                Label = "Checkout",
                OnClick = async () => Stripe.RedirectToCheckout(await Stripe.GetCheckoutSession(MentorProfile.StripeAccountId,
                    $"go/{MentorProfile.ProfileId}/ask", 
                    $"go/{MentorProfile.ProfileId}/complete",
                    FeedbackRequest,
                    Offering))
            }
        };
    }
}

