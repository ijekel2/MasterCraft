@page "/go/{ProfileId}/complete/{FeedbackRequestId}"
@attribute [Authorize]

@using MasterCraft.Client.Common.Api
@using MasterCraft.Shared.ViewModels.Aggregates;
@using MasterCraft.Client.Common.Services;
@using Blazored.LocalStorage;

<div id="header">
    <img class="profile-image" src="@Profile.ProfileImageUrl"/>
    <h3>Your work is submitted!</h3>
    <h6>@GetConfirmationPhrase()</h6>
    <hr />
</div>
<br/>
<br />
<div id="next-steps">
    <h4>What happens next</h4>
    <div class="step">
        <button>1</button>
        <span>@GetStepOneText()</span>
    </div>
    <div class="step">
        <button>2</button>
        <span>@GetStepTwoText()</span>
    </div>

    <div class="step">
        <button>3</button>
        <span>@GetStepThreeText()</span>
    </div>
    <br />
    <div class="step">
        <span><em>@GetRefundText()</em></span>
    </div>

</div>

<style>
    .profile-image {
        height: 100px;
        aspect-ratio: 1 / 1;
        margin: 10px;
    }

    #header {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 800px;
        margin: auto;
    }
    
    #next-steps {
        width: 900px;
        margin: auto;
    }

    button {
        border-radius: 50%;
        height: 30px;
        aspect-ratio: 1 / 1;
        background-color: @Colors.McGreen;
        color: white;
        border: none;
        pointer-events: none;
        margin: 5px 10px;
        font-weight: bold;
    }

    .step {
        display: flex;
        align-items: center;
    }
</style>

@code {
    [Inject] public ApiClient Api { get; set; }
    [Inject] public ILocalStorageService Storage { get; set; }
    [Inject] public NavigationManager Navigation { get; set; }
    [Inject] public CurrentUserService UserService { get; set; }
    [Parameter] public MentorProfileVm Profile { get; set; } = new();
    [Parameter] public string ProfileId { get; set; }
    [Parameter] public string FeedbackRequestId { get; set; }
    [CascadingParameter] public SubmitLayout SubmitLayout { get; set; }
    private UserVm cCurrentUser = new();

    protected override async Task OnInitializedAsync()
    {
        cCurrentUser = await UserService.GetCurrentUser();

        var submitResponse = await Api.PostAsync<SubmitFeedbackRequestVm, EmptyVm>($"feedbackrequests/submit", 
            new SubmitFeedbackRequestVm() { FeedbackRequestId = FeedbackRequestId });

        if (submitResponse.Success)
        {
            var apiResponse = await Api.GetAsync<MentorProfileVm>($"mentors/getProfile?profileid={ProfileId}");

            if (apiResponse.Success)
            {
                Profile = apiResponse.Response;
            }
        }
        else
        {
            Navigation.NavigateTo("/notfound");
        }

    }

    private void OnCopyLinkClick()
    {
        Navigation.NavigateTo("/portal");
    }

    private void OnGoToAccountClick()
    {
        Navigation.NavigateTo("/portal");
    }

    private string GetConfirmationPhrase()
    {
        return $"Your work was sent to {Profile.FirstName} {Profile.LastName}.";
    }

    private string GetStepOneText()
    {
        return $"Check your email. We sent confirmation to {cCurrentUser.Email}";
    }

    private string GetStepTwoText()
    {
        return $"{Profile.FirstName} will look at your video and record a personal with feedback — usually within 24-72 hrs.";
    }

    private string GetStepThreeText()
    {
        return $"When your feedback is completed, we'll email you a link to view or download your feedback video.";
    }

    private string GetRefundText()
    {
        return $"If {Profile.FirstName} isn't able to complete your request, the hold on your card will be removed within 5-7 business days.";
    }
}